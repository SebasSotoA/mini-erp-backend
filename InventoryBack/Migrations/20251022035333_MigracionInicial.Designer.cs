// <auto-generated />
using System;
using InventoryBack.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InventoryBack.Migrations
{
    [DbContext(typeof(InventoryDbContext))]
    [Migration("20251022035333_MigracionInicial")]
    partial class MigracionInicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InventoryBack.Models.Domain.Bodega", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.ToTable("Bodegas");
                });

            modelBuilder.Entity("InventoryBack.Models.Domain.CampoExtra", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<bool>("EsRequerido")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("TipoDato")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ValorPorDefecto")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CamposExtra");
                });

            modelBuilder.Entity("InventoryBack.Models.Domain.Categoria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImagenCategoriaUrl")
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("InventoryBack.Models.Domain.FacturaCompra", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BodegaId")
                        .HasColumnType("uuid");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NumeroFactura")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<Guid>("ProveedorId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BodegaId");

                    b.HasIndex("NumeroFactura")
                        .IsUnique();

                    b.HasIndex("ProveedorId");

                    b.ToTable("FacturasCompra");
                });

            modelBuilder.Entity("InventoryBack.Models.Domain.FacturaCompraDetalle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer");

                    b.Property<decimal>("CostoUnitario")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Descuento")
                        .HasColumnType("numeric");

                    b.Property<Guid>("FacturaCompraId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Impuesto")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProductoId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalLinea")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FacturaCompraId");

                    b.HasIndex("ProductoId");

                    b.ToTable("FacturasCompraDetalle");
                });

            modelBuilder.Entity("InventoryBack.Models.Domain.FacturaVenta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BodegaId")
                        .HasColumnType("uuid");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FormaPago")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MedioPago")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NumeroFactura")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<int?>("PlazoPago")
                        .HasColumnType("integer");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("VendedorId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BodegaId");

                    b.HasIndex("NumeroFactura")
                        .IsUnique();

                    b.HasIndex("VendedorId");

                    b.ToTable("FacturasVenta");
                });

            modelBuilder.Entity("InventoryBack.Models.Domain.FacturaVentaDetalle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Descuento")
                        .HasColumnType("numeric");

                    b.Property<Guid>("FacturaVentaId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Impuesto")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductoId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalLinea")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FacturaVentaId");

                    b.HasIndex("ProductoId");

                    b.ToTable("FacturasVentaDetalle");
                });

            modelBuilder.Entity("InventoryBack.Models.Domain.MovimientoInventario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BodegaId")
                        .HasColumnType("uuid");

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer");

                    b.Property<decimal?>("CostoUnitario")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("FacturaId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Observacion")
                        .HasColumnType("text");

                    b.Property<decimal?>("PrecioUnitario")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProductoId")
                        .HasColumnType("uuid");

                    b.Property<string>("TipoMovimiento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("BodegaId");

                    b.HasIndex("ProductoId");

                    b.ToTable("MovimientosInventario");
                });

            modelBuilder.Entity("InventoryBack.Models.Domain.Producto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("CategoriaId")
                        .HasColumnType("uuid");

                    b.Property<string>("CodigoSku")
                        .HasColumnType("text");

                    b.Property<decimal>("CostoInicial")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImagenProductoUrl")
                        .HasColumnType("text");

                    b.Property<decimal?>("ImpuestoPorcentaje")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("PrecioBase")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UnidadMedida")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("CodigoSku")
                        .IsUnique();

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("InventoryBack.Models.Domain.ProductoBodega", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BodegaId")
                        .HasColumnType("uuid");

                    b.Property<int>("CantidadInicial")
                        .HasColumnType("integer");

                    b.Property<int?>("CantidadMaxima")
                        .HasColumnType("integer");

                    b.Property<int?>("CantidadMinima")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProductoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BodegaId");

                    b.HasIndex("ProductoId");

                    b.ToTable("ProductoBodegas");
                });

            modelBuilder.Entity("InventoryBack.Models.Domain.ProductoCampoExtra", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampoExtraId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CampoExtraId");

                    b.HasIndex("ProductoId");

                    b.ToTable("ProductoCamposExtra");
                });

            modelBuilder.Entity("InventoryBack.Models.Domain.Proveedor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Correo")
                        .HasColumnType("text");

                    b.Property<string>("Identificacion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Proveedores");
                });

            modelBuilder.Entity("InventoryBack.Models.Domain.Vendedor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Correo")
                        .HasColumnType("text");

                    b.Property<string>("Identificacion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Vendedores");
                });

            modelBuilder.Entity("InventoryBack.Models.Domain.FacturaCompra", b =>
                {
                    b.HasOne("InventoryBack.Models.Domain.Bodega", null)
                        .WithMany()
                        .HasForeignKey("BodegaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InventoryBack.Models.Domain.Proveedor", null)
                        .WithMany()
                        .HasForeignKey("ProveedorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryBack.Models.Domain.FacturaCompraDetalle", b =>
                {
                    b.HasOne("InventoryBack.Models.Domain.FacturaCompra", null)
                        .WithMany()
                        .HasForeignKey("FacturaCompraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryBack.Models.Domain.Producto", null)
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryBack.Models.Domain.FacturaVenta", b =>
                {
                    b.HasOne("InventoryBack.Models.Domain.Bodega", null)
                        .WithMany()
                        .HasForeignKey("BodegaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InventoryBack.Models.Domain.Vendedor", null)
                        .WithMany()
                        .HasForeignKey("VendedorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryBack.Models.Domain.FacturaVentaDetalle", b =>
                {
                    b.HasOne("InventoryBack.Models.Domain.FacturaVenta", null)
                        .WithMany()
                        .HasForeignKey("FacturaVentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryBack.Models.Domain.Producto", null)
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryBack.Models.Domain.MovimientoInventario", b =>
                {
                    b.HasOne("InventoryBack.Models.Domain.Bodega", null)
                        .WithMany()
                        .HasForeignKey("BodegaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InventoryBack.Models.Domain.Producto", null)
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryBack.Models.Domain.Producto", b =>
                {
                    b.HasOne("InventoryBack.Models.Domain.Categoria", null)
                        .WithMany()
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("InventoryBack.Models.Domain.ProductoBodega", b =>
                {
                    b.HasOne("InventoryBack.Models.Domain.Bodega", null)
                        .WithMany()
                        .HasForeignKey("BodegaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryBack.Models.Domain.Producto", null)
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryBack.Models.Domain.ProductoCampoExtra", b =>
                {
                    b.HasOne("InventoryBack.Models.Domain.CampoExtra", null)
                        .WithMany()
                        .HasForeignKey("CampoExtraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryBack.Models.Domain.Producto", null)
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
